<?php

/**
 * Implements hook_form_alter().
 *
 * Hide the add to cart button when the user satisfied the requirement.
 */
function course_uc_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'uc_product_add_to_cart') !== FALSE) {
    global $user;
    $node = node_load($form['nid']['#value']);

    if (course_node_is_course($node)) {
      $course = course_get_course($node, $user);
      // Viewing a course product.
      if (course_enrollment_check($node->nid, $user->uid) || (!($node->sell_price > 0) && variable_get('course_access_bypass_checkout', 1))) {
        // User already enrolled, or course is free and bypass is enabled.
        $form['actions']['submit']['#access'] = FALSE;
      }
    }
    else {
      // Viewing a product that is part of another course.
      $courseNode = course_get_context('course_uc', 'payment', $node->nid);
      $course = course_get_course($courseNode, $user);

      if ($course) {
        foreach ($course->getObjects() as $idx => $courseObject) {
          if ($courseObject->getComponent() == 'payment' && $courseObject->getInstanceId() == $node->nid) {
            if ($courseObject->getFulfillment()->isComplete()) {
              // User already purchased.
              $form['actions']['submit']['#access'] = FALSE;
            }
          }
        }
      }
    }


    // If there are any other blockers (like date based access) then do not
    // display the add to cart button as it would be a method to enroll,
    // bypassing the restrictions.
    $blockers = course_enroll_access($node, $user, TRUE, TRUE);
    foreach ($blockers as $key => $blocker) {
      if (!$blocker['success'] && $key != 'course_must_purchase') {
        $form['actions']['submit']['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'uc_cart_view_form') {
    if (variable_get('course_uc_restrict_qty', 1)) {
      foreach ($form['items'] as $key => &$item) {
        if (is_numeric($key) && isset($item['nid'])) {
          $node = node_load($item['nid']['#value']);
          if (course_node_is_course($node)) {
            $item['qty']['#disabled'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function course_uc_node_view($node, $view_mode = 'full') {
  if (course_node_is_course($node) && isset($node->sell_price) && $node->sell_price > 0) {
    $hides = array(
      'sell_price',
      'model',
      'list_price',
      'cost',
      'weight',
      'dimensions',
    );
    if (!($node->sell_price > 0)) {
      $hides[] = 'display_price';
    }
    foreach ($hides as $hide) {
      unset($node->content[$hide]);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function course_uc_node_insert($node) {
  if (course_node_is_course($node) && isset($node->sell_price) && $node->sell_price > 0) {
    // Course has a sell price.
    $course = course_get_course($node);
    foreach ($course->getObjects() as $courseObject) {
      if ($courseObject->getComponent() == 'payment') {
        return;
      }
    }

    // If we are here, the course did not have a payment object.
    $newObject = course_get_course_object('course_uc', 'payment');
    $newObject->setCourse($course);
    $newObject->setCourse($node->nid);
    $newObject->setModule('course_uc');
    $newObject->setComponent('payment');
    $newObject->setInstanceId($node->nid);
    $newObject->setOption('title', 'Payment required');
    $newObject->setOption('required', TRUE);
    $newObject->setOption('enabled', TRUE);
    $newObject->setOption('hidden', TRUE);
    $newObject->setOption('weight', -9999);
    $newObject->save();
  }
}

/**
 * Implements hook_node_update().
 */
function course_uc_node_update($node) {
  course_uc_node_insert($node);
}

/**
 * Ubercart course settings form.
 */
function course_uc_settings_form() {
  $form = array();

  $form['course_access_bypass_checkout'] = array(
    '#title' => 'Bypass checkout for free course products.',
    '#description' > 'Users will not have to go through checkout for course products that are free.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('course_access_bypass_checkout', 1),
  );

  $form['course_uc_restrict_qty'] = array(
    '#title' => 'Restrict course products to 1 per customer.', '#description' > 'Course will restrict users from adding the product to cart if they have already purchased the course or already have the course in their cart.',
    '#type' => 'checkbox',
    '#default_value' => variable_get('course_uc_restrict_qty', 1),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function course_uc_init() {
  if (arg(1) == 'checkout') {
    global $conf;
    // Turn off content profile on registration for ubercart account creations.
    $conf['content_profile_profile']['registration_use'] = 0;
  }
}

/**
 * Implements hook_course_enroll().
 *
 * Satisfy payment requirement when manually enrolled.
 */
function course_uc_course_enroll($node, $user) {
  $course = course_get_course($node, $user);
  foreach ($course->getObjects() as $idx => $courseObject) {
    if ($idx == 0 && $courseObject->getComponent() == 'payment') {
      $courseObject->getFulfillment()->setComplete(TRUE)->save();
    }
  }
}

/**
 * Implements hook_add_to_cart().
 */
function course_uc_uc_add_to_cart($nid, $qty, $data) {
  if (variable_get('course_uc_restrict_qty', 1)) {
    global $user;
    $node = node_load($nid);
    if (course_node_is_course($node)) {
      if (course_uc_check_purchased($user->uid, $nid)) {
        return array(
          array(
            'success' => FALSE,
            'message' => t('You have already purchased this course.'),
            'silent' => FALSE,
          ),
        );
      }
      if (course_uc_check_cart($nid)) {
        return array(
          array(
            'success' => FALSE,
            'message' => t('This course is already in your !cart.', array('!cart' => l('shopping cart', 'cart'))),
            'silent' => FALSE,
          ),
        );
      }
    }
  }
}

/**
 * Check if a user purchased a node previously.
 */
function course_uc_check_purchased($uid, $nid) {
  $sql = "SELECT 1 FROM {uc_orders} uco
  LEFT JOIN {uc_order_products} ucop ON (uco.order_id = ucop.order_id)
  WHERE uid = :uid AND nid = :nid AND uco.order_status = 'completed'";
  $purchased = db_query($sql, array(':nid' => $nid, ':uid' => $uid))->fetchField();
  return $purchased;
}

/**
 * Check if a node is in a user's cart.
 */
function course_uc_check_cart($nid) {
  $cid = uc_cart_get_id();
  $contents = uc_cart_get_contents($cid);
  foreach ($contents as $item) {
    if ($item->nid == $nid) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_rules_action_info().
 */
function course_uc_rules_action_info() {
  $actions = array();

  $order_arg = array(
    'type' => 'uc_order',
    'label' => t('Order'),
  );

  $actions['course_uc_enroll_user_in_ordered_courses'] = array(
    'label' => t('Enroll user in ordered courses'),
    'group' => t('Order'),
    'parameter' => array(
      'order' => $order_arg,
    ),
  );

  return $actions;
}

/**
 * Loops through items in an Ubercart order and enrolls the user in courses purchased.
 */
function course_uc_enroll_user_in_ordered_courses($order) {
  foreach ($order->products as $product) {
    $node = node_load($product->nid);
    // TODO Convert "user_load" to "user_load_multiple" if "$order->uid" is other than a uid.
    // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
    // Example: array_shift(user_load_multiple(array(), $order->uid))
    $user = user_load($order->uid);

    if (course_node_is_course($node)) {
      // This product is an actual course. They have to be enrolled.
      // This will also satisfy the first payment requirement.
      // @see course_uc_course_enroll()
      course_enroll($node, $user, 'ubercart');
    }

    if ($courseNode = course_determine_context('course_uc', 'payment', $node->nid)) {
      // This product is also a course object, other than the first one.
      // Satisfy it!
      $course = course_get_course($courseNode, $user);
      foreach ($course->getObjects() as $idx => $courseObject) {
        if ($idx != 0 && $courseObject->getComponent() == 'payment' && $courseObject->getInstanceId() == $node->nid) {
          // Found the course object that matched the instance (product).
          $courseObject->getFulfillment()->setComplete(TRUE)->save();
        }
      }
    }
  }
}

/**
 * Implements hook_token_list().
 */
function course_uc_token_list($type = 'all') {
  $tokens = array();

  if ($type == 'order') {
    $tokens['order']['course-products-header'] = t('Text to show if there are course products in the cart.');
    $tokens['order']['course-products'] = t('A link to the course products.');
  }

  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function course_uc_token_values($type, $object = NULL, $options = array()) {
  $values = array();

  if ($type == 'order') {
    foreach ($object->products as $product) {
      $node = node_load($product->nid);
      if (course_node_is_course($node)) {
        $line = $node->title . ' - ' . l('View course page', "node/{$node->nid}");
        // @todo should we be using a menu access callback like this? Why not
        // use course_take_course_access() instead?
        if (course_node_is_course($node) && course_take_course_menu_access($node)) {
          $line .= ' or ' . l('Take course now', "node/{$node->nid}/takecourse");
        }
        $courses[] = $line;
        $show_header = 1;
      }
      $items[] = l($node->title, "node/{$node->nid}");
    }
    if ($show_header) {
      $values['course-products-header'] = t("Here are the courses you have purchased:");
    }
    $values['course-products'] = theme('item_list', array('items' => $courses));
    $values['all-products'] = theme('item_list', array('items' => $items));
  }

  return $values;
}

/**
 * Implements hook_course_handlers().
 */
function course_uc_course_handlers() {
  return array(
    'object' => array(
      'payment' => array(
        'name' => 'Payment',
        'class' => 'CourseObjectUbercart',
      ),
    ),
    'settings' => array(
      'ubercart' => array(
        'name' => t('Ubercart'),
        'description' => t('Ubercart course settings.'),
        'callback' => 'course_uc_settings_form',
      ),
    ),
  );
}

/**
 * Implements hook_course_access().
 *
 * Block the user from enrolling in a paid course.
 */
function course_uc_course_access($op, $node, $user) {
  if ($op == 'enroll') {
    $must_purchase = FALSE;
    $course = course_get_course($node, $user);
    if (isset($node->sell_price) && ($node->sell_price > 0 || !variable_get('course_access_bypass_checkout', 1))) {
      // Course has a price, or bypass checkout is disabled.
      if (!course_enrollment_check($node->nid, $user->uid)) {
        // User is not enrolled so force purchase.
        $must_purchase = TRUE;
      }

      // Now we have to check that even if the course has a price, that the
      // payment object is first (to block enrollments). If the course is $0 and
      // there are no payment objects, we assume the enrollment is blocked.
      foreach ($course->getObjects() as $idx => $courseObject) {
        $is_payment = ($courseObject->getComponent() == 'payment');
        $first_object = ($idx == 0);
        $complete = $courseObject->getFulfillment()->isComplete();
        $is_this_course = ($courseObject->getInstanceId() == $node->nid);
        if ($is_payment && !$complete) {
          // We only want to block enrollment if the payment object linked to
          // this course is the first object.
          if ($first_object) {
            $must_purchase = TRUE;
          }
          else {
            // Set back to false because the user should still be able to
            // enroll.
            $must_purchase = FALSE;
          }
        }
      }
    }

    if ($must_purchase) {
      return array('course_must_purchase' => array(
          'success' => FALSE,
          'header' => 'Payment required',
          'message' => 'You must first purchase this course.',
        ),
      );
    }
  }
}

/**
 * Implements hook_default_rules_configuration().
 *
 * Define the rule that enrolls users into purchased courses.
 */
function course_uc_default_rules_configuration() {
  $configs = array();
  $rule = '{ "rules_enroll_user_in_ordered_courses_when_order_marked_as_comple" : {
    "LABEL" : "Enroll user in ordered courses when order marked as complete",
    "PLUGIN" : "reaction rule",
    "REQUIRES" : [ "rules", "course_uc", "uc_order" ],
    "ON" : [ "uc_order_status_update" ],
    "IF" : [
      { "data_is" : { "data" : [ "updated-order:order-status" ], "value" : "completed" } }
    ],
    "DO" : [
      { "course_uc_enroll_user_in_ordered_courses" : { "order" : [ "order" ] } }
    ]
  }
}';
  $configs['rules_enroll_user_in_ordered_courses_when_complete'] = rules_import($rule);
  return $configs;
}
