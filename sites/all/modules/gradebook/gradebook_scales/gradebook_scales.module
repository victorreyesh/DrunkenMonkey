<?php

/**
 * @file
 * Provides weights and scales for Gradebooks
 */

/**
 * Implements hook_theme().
 */
function gradebook_scales_theme() {
  return array(
    'gradebook_scales_form' => array('render element' => 'form'),
    'gradebook_scales_weight_form' => array('render element' => 'form'),
  );
}

/**
 * Implements hook_menu().
 */
function gradebook_scales_menu() {
  $items = array();
  $items['gradebook/%gradebookapi_gradebook/scales'] = array(
    'title' => 'Scales',
    'page callback' => 'gradebook_scales_list_page',
    'page arguments' => array(1),
    'access callback' => 'gradebookapi_is_teacher',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  $items['gradebook/%gradebookapi_gradebook/scaleadd'] = array(
    'title' => 'Add scale',
    'page callback' => 'gradebook_scales_add_page',
    'page arguments' => array(1),
    'access callback' => 'gradebookapi_is_teacher',
    'access arguments' => array(1),
    'weight' => 6,
    'type' => MENU_CALLBACK,
  );

  $items['gradebook/%gradebookapi_gradebook/scaleedit/%'] = array(
    'title' => 'Edit scale',
    'page callback' => 'gradebook_scales_edit_page',
    'page arguments' => array(1, 3),
    'access callback' => 'gradebookapi_is_teacher',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_CALLBACK,
  );

  $items['gradebook/%gradebookapi_gradebook/catweights'] = array(
    'title' => 'Weighting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gradebook_scales_weight_form', 1),
    'access callback' => 'gradebookapi_is_teacher',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;

}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_list_page($gradebook) {
  // get all available scales for this gradebook
  $scales = gradebook_scales_get_scales($gradebook->tid);

  $start_from      = isset($_GET['page']) ? $_GET['page'] : 0;
  $total_entries   = 0; // total count for pager
  $page_increment  = 25; // number of tids per page
  $displayed_count = 0; // number of tids shown

  $rows = array();

  foreach ($scales as $scale) {
    $total_entries++; // we're counting all-totals, not displayed
    if (($start_from && ($start_from * $page_increment) >= $total_entries) || ($displayed_count == $page_increment)) {
      continue;
    }
    $rows[] = array($scale->scalename, l('edit', 'gradebook/' . $gradebook->tid . '/scaleedit/' . $scale->sid));
    $displayed_count++; // we're counting tids displayed
  }

  if (empty($rows)) {
    $rows[] = array(array(
        'data' => t('No scales available.'),
        'colspan' => '2',
      ));
  }

  $rows[] = array(array(
      'data' => l('Add new scale', 'gradebook/' . $gradebook->tid . '/scaleadd'),
      'colspan' => '2',
    ));

  $GLOBALS['pager_page_array'][] = $start_from; // FIXME
  $GLOBALS['pager_total'][] = intval($total_entries / $page_increment) + 1; // FIXME

  if ($total_entries >= $page_increment) {
    $rows[] = array(array(
        'data' => theme('pager', array('tags' => NULL)),
        'colspan' => '2',
      ));
  }
  $header = array(t('Scale Name'), t('Operations'));

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_add_page($gradebook) {
  return gradebook_scales_edit_page($gradebook);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_edit_page($gradebook, $sid = NULL) {
  $scalename = '';
  $scalevalues = array();
  if (!is_null($sid)) { // create the $scalevalues array if $sid is not NULL
    $scalename = gradebook_scales_get_scalename($sid);
    if ((isset($_POST['op']) && $_POST['op'] == t('Delete')) || isset($_POST['confirm'])) {
      return drupal_get_form('gradebook_scales_confirm_scale_delete', $gradebook->tid, $sid, $scalename);
    }
    $scalevalues = gradebook_scales_get_scale_data($sid);
  }
  return drupal_get_form('gradebook_scales_form', $gradebook->tid, $sid, $scalename, $scalevalues);

}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_form($form, &$form_state, $gid, $sid = NULL, $scalename = '', $scalevalues = array()) {
  $form['#theme'] = 'gradebook_scales_form';
  $form['#gid'] = $gid;
  if (!is_null($sid)) {
    $form['#sid'] = $sid;
  }
  $form['scalename'] = array(
    '#type' => 'textfield',
    '#title' => t('Scale Name'),
    '#size' => 32,
    '#default_value' => $scalename,
    '#required' => TRUE,
  );
  $form['entry'] = array('#tree' => TRUE);
  $imax = count($scalevalues) + 6; //add some more fields for good measure
  for ($i = 0; $i < $imax; $i++) {
    $form['entry'][$i]['min']  = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => isset($scalevalues[$i]['min']) ? $scalevalues[$i]['min'] : '',
    );
    $form['entry'][$i]['max']  = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => isset($scalevalues[$i]['max']) ? $scalevalues[$i]['max'] : '',
    );
    $form['entry'][$i]['mark'] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => isset($scalevalues[$i]['mark']) ? $scalevalues[$i]['mark'] : '',
    );
  }
  $result = gradebookapi_gradebook_query();
  $options = array();

  foreach ($result as $term) {
    $gradebook = gradebookapi_gradebook_load($term->tid);
    if (gradebookapi_is_teacher($gradebook)) {
      $options[$term->tid] = $gradebook->name;
    }
    unset($options[$gid]);
  }
  if (!empty($options)) {
    $form['copygid'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Make a copy of this scale for my other gradebooks'),
      '#options' => $options,
      '#required' => FALSE,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  if (isset($form['#sid'])) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
  }
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('gradebook_scales_form_cancel'),
  );

  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_form_cancel($form, &$form_state) {
  $form_state['redirect'] = array('gradebook/' . $form['#gid'] . '/scales');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_form_submit($form, &$form_state) {
  // insert or update scale name
  // note: it should also be possible to share scales between gradebooks that have a common teacher

  $sid = isset($form['#sid']) ? $form['#sid'] : NULL;
  gradebook_scales_save_scale($form['#gid'], $sid, $form_state['values']['scalename'], $form_state['values']['entry']);
  $copygids = array_filter((array) $form_state['values']['copygid']);
  foreach ($copygids as $gid) {
    gradebook_scales_save_scale($gid, NULL, $form_state['values']['scalename'], $form_state['values']['entry']);
  }
  $form_state['redirect'] = array('gradebook/' . $form['#gid'] . '/scales');
}

/**
 * Form builder for the scale  delete form.
 *
 * @ingroup forms
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_confirm_scale_delete($form, &$form_state, $gid, $sid, $scalename) {
  $form = array();
  $form['#sid'] = $sid;
  $form['#gid'] = $gid;
  return confirm_form(
    $form,
    t('Are you sure you want to delete the gradebook scale %name?', array('%name' => $scalename)),
    'gradebook/' . $gid . '/scales',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_confirm_scale_delete_submit($form, &$form_state) {
  gradebook_scales_scale_delete($form['#sid']);
  drupal_set_message(t('The gradebook scale has been deleted.'));
  watchdog('gradebook_scales', 'gradebook_scales: deleted scale %sid.', array('%sid' => $form['#sid']), WATCHDOG_NOTICE);
  $form_state['redirect'] = 'gradebook/' . $form['#gid'] . '/scales';
  return;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_gradebook_scales_form($variables) {
  $form = $variables['form'];
  $output = '<p>' . t('Provide a brief, informative name for the scale. This will appear on the assignment edit form to choose a scale') . '</p>';
  $output .= drupal_render($form['scalename']);
  $output .= '<p>' . t('<strong>Instructions:</strong> Enter grading scales with one mark in each row. The scale maps a range of grade percentages to a mark, which can be a sequence of up to 5 characters.') . '</p>';
  $output .= '<p>' . t('Example: A grade of 90 (Min) to 100 (Max) might be displayed as an <em>A</em>.') . '</p>';
  $output .= '<p><em>' . t('If more rows are needed, fill available rows, save the form and then edit again. This will add additional blank rows to the form. All fields must be entered for a row to be saved.') . '</em></p>';
  $header = array(
    'min' => t("Minimum %"),
    'max' => t("Maximum %"),
    'mark' => t('Mark'),
  );
  $rownums = element_children($form['entry']);
  foreach ($rownums as $id) {
    $row = NULL;
    $row[] = array(
      'data' => drupal_render($form['entry'][$id]['min']),
      'class' => '',
    );
    $row[] = array(
      'data' => drupal_render($form['entry'][$id]['max']),
      'class' => '',
    );
    $row[] = array(
      'data' => drupal_render($form['entry'][$id]['mark']),
      'class' => '',
    );
    $rows[] = array('data' => $row);
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => '')));
  $output .= drupal_render($form['copygid']);
  $output .= '<div class="container-inline">' . drupal_render($form['submit']);
  $output .= drupal_render($form['cancel']) . drupal_render($form['delete']) . '</div>';
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_get_scales($gid = NULL) {
  $scales = array();
  if (!is_null($gid)) {
    $result = db_query('SELECT * FROM {gradebook_scales} WHERE gid = :gid', array(':gid' => $gid));
  }
  else { // show all possible scales if no gradebook is selected
    $result = db_query('SELECT * FROM {gradebook_scales}');
  }
  foreach ($result as $scale) {
    $scales[$scale->sid] = $scale;
  }
  return $scales;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_get_scale_data($sid) {
  $scalevalues = array();
  $result = db_query('SELECT * FROM {gradebook_scales_data} WHERE sid = :sid ORDER BY min DESC', array(':sid' => $sid), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $row) {
    $scalevalues[] = $row;
  }
  return $scalevalues;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_get_scalename($sid) {
  return db_query('SELECT scalename FROM {gradebook_scales} WHERE sid = :sid', array(':sid' => $sid))->fetchField();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_save_scale($gid, $sid = NULL, $scalename, $rows) {
  if (is_null($sid) || $sid == 0) { // create a new scale : better to all $sid == 0 and enforce NULL for no scale
    $sid = db_insert('gradebook_scales')
      ->fields(array(
        'gid' => $gid,
        'scalename' => $scalename,
      ))
      ->execute();
  }
  else { // update an existing scale
    db_update('gradebook_scales')
      ->fields(array(
        'scalename' => $scalename,
      ))
      ->condition('sid', $sid)
      ->execute();
  }
  db_delete('gradebook_scales_data')
    ->condition('sid', $sid)
    ->execute(); // remove previous scale values, if any
  foreach ($rows as $row) {
    if (is_numeric($row['min']) && is_numeric($row['max'])) {
      db_insert('gradebook_scales_data')
        ->fields(array(
          'sid' => $sid,
          'min' => $row['min'],
          'max' => $row['max'],
          'mark' => drupal_substr($row['mark'], 0, 5), // Truncate at 5 characters.
        ))
        ->execute();
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_scale_delete($sid) {
  db_update('gradebookapi_assignment')
    ->fields(array(
    'sid' => NULL,
    ))
    ->condition('sid', $sid)
    ->execute();

  db_delete('gradebook_scales_data')
    ->condition('sid', $sid)
    ->execute();

  db_delete('gradebook_scales')
    ->condition('sid', $sid)
    ->execute();
}

/**
 *  gradebookapi_assigment_form_elements().
 *    Prepare extra assignment fields for the node create forms.
 *    Called via hook_form_alter.
 *  @param $node
 *    the assignment node
 *  @return $form
 *    additional form array elements for the assignment create form.
 */

function gradebook_scales_assignment_form_elements($node) {
  $form = array();
  $oldsid = isset($node->gradebookapi['sid']) ? $node->gradebookapi['sid'] : NULL;
  $gradebook = NULL;
  $items = field_get_items('node', $node, 'gradebookapi_gradebook');
  $current = array();
  if (!empty($items)) {
    foreach ($items as $item) {
      //@todo This defaults to last term if there are several - multiple gradebooks?
      $gradebook = gradebookapi_get_tid_gradebook($item['tid']);
    }
  }
  $gid = isset($gradebook) ? $gradebook->tid : NULL;
  $scales = gradebook_scales_get_scales($gid);
  $options  = array('none' => t('- No Scale -'));
  foreach ($scales as $scale) {
    if ($gid) {
      $text = $scale->scalename;
    }
    else {
      $term = taxonomy_term_load($scale->gid);
      $text = $term->name . '::' . $scale->scalename;
    }
    $options[$scale->sid] = $text;
  }

  $form['sid'] = array(
    '#type' => 'select',
    '#title' => t('Grading Scale'),
    '#options' => $options,
    '#default_value' => isset($node->gradebookapi['sid']) ? $node->gradebookapi['sid'] : 'none',
    '#required' => TRUE,
  );

  $form['#submit'][] = 'gradebook_scales_assignment_submit';
  if (isset($oldsid)) {
    $form['#oldsid'] = $oldsid;
  }

  return $form;
}

/**
 * Implements hook_node_validate().
 *    Verify the form elements have acceptable values.
 *  @param $node
 *    the assignment node
 *  @param $form
 *    the $form parameter passed from node_validate
 *  @return NONE
 */
function gradebook_scales_node_validate($node, $form, &$form_state) {
  // Only validate on assignment nodes.
  if (isset($form['gradebook_scales'])) {
    // Need to determine current gradebook term - may have changed on submission
    $items = field_get_items('node', $node, 'gradebookapi_gradebook');  // not sure if this makes sense here
    $current = array();
    if (!empty($items)) {
      foreach ($items as $item) {
        //@todo This defaults to last term if there are several - multiple gradebooks?
        $gradebook = gradebookapi_get_tid_gradebook($item['tid']);
      }
    }
    $allowed = gradebook_scales_get_scales($gradebook->tid);
    if (!isset($allowed[$node->gradebookapi['sid']]) && $node->gradebookapi['sid'] != 'none') {
      form_set_error('sid', t('The selected scale is not available for the selected gradebook(s).'));
    }
    else {
      // refresh the scales for this assignment since assignment may have changed
      gradebookapi_load_marks($gradebook->tid, $node->nid, 0, TRUE);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gradebook_scales_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $types = gradebookapi_get_assignment_types();
  // Is this an assignment type?
  if (!empty($types)) {
    if (in_array($node->type, $types)) {
      // Add the gradebook_scales form elements to the gradebookapi fieldset.
      $form['gradebookapi'] += gradebook_scales_assignment_form_elements($node);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function gradebook_scales_node_view($node, $view_mode, $langcode) {
  if (in_array($node->type, (array) gradebookapi_get_assignment_types())) {
    // Adds assignment field values to $node->content before rendering.
    $sid = db_query('SELECT sid FROM {gradebookapi_assignment} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
    $node->gradebookapi['sid'] = $sid;
  }
}

/**
 * Implements hook_node_insert().
 */
function gradebook_scales_node_insert($node) {
  if (in_array($node->type, (array) gradebookapi_get_assignment_types())) {
    $sid = ($node->gradebookapi['sid'] == 'none' || $node->gradebookapi['sid'] === NULL) ? NULL : (int) $node->gradebookapi['sid'];
    db_insert('gradebookapi_assignment')
    ->fields(array(
      'nid' => $node->nid,
      'sid' => $sid,
      ))
    ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function gradebook_scales_node_update($node) {
  if (in_array($node->type, (array) gradebookapi_get_assignment_types())) {
    $sid = ($node->gradebookapi['sid'] == 'none' || $node->gradebookapi['sid'] === NULL) ? NULL : (int) $node->gradebookapi['sid'];
    db_update('gradebookapi_assignment')
    ->fields(array('sid' => $sid))
    ->condition('nid', $node->nid)
    ->execute();
  }
}

/**
 * Implements hook_gradebookapi_marks().
 *  Load the assignment scale matrix for the gradebook
 */
function gradebook_scales_gradebookapi_marks($gid, $aid = -1, $gradepoints, $refresh = FALSE) {
  // Each assignment has a mark, and there are many assignments in a gradebook
  // for efficiency, store the marks for each gradebook staticly, as they are
  // requested. Then subsequent views can be quickly looked up.
  // If an assignment is modified (changing scale) then this cache will need to
  // be refreshed.
  // $data[$gid][$aid]['has_scale'] = TRUE means there is a loaded scale
  // $data[$gid][$aid]['has_scale'] = FALSE means use the default numerical values (no scale)
  // emtpy($data[$gid][$aid]) means we haven't checked yet.

  static $data, $scales;
  if ($refresh) { // reload scale data for $gid and $aid
    if ($aid == -1) { // reset all
      unset($data[$gid]);
      $data[$gid] = array();
    }
    else { // refresh just this assignment
      unset($data[$gid][$aid]);
    }
  }
  else {
    if (!isset($data[$gid]) || !is_array($data[$gid])) {
      $data[$gid] = array();
    }
    if (!isset($data[$gid][$aid]) || !is_array($data[$gid][$aid])) {
      $data[$gid][$aid] = array();
    }
    if (empty($data[$gid][$aid])) { //retrieve scale data for this assignment
      $sid = db_query('SELECT sid from {gradebookapi_assignment} WHERE nid = :nid', array(':nid' => $aid))->fetchField();
      if (is_null($sid) || $sid == 0) {
        $data[$gid][$aid] = array('has_scale' => FALSE);
        return FALSE;
      }
      else { // a scale exists, continue with the operation
        $data[$gid][$aid] = array(
          'has_scale' => TRUE,
          'sid' => $sid,
        );
        if (!is_array($scales[$sid])) { // we need to retrieve the scale from the database
          $scales[$sid] = gradebook_scales_get_scale_data($sid);
        }
      }
    }
    // mark data is available, perform operation
    if ($data[$gid][$aid]['has_scale'] == FALSE) {
      return FALSE;
    }
    $sid = $data[$gid][$aid]['sid'];
    foreach ((array) $scales[$sid] as $scale) {
      if ($gradepoints >= $scale['min'] && $gradepoints <= $scale['max']) {
        return $scale['mark'];
      }
    }
    return FALSE; // no mark exists
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_gradebookapi_get_gradebook_weights($gid) {
  $method =  gradebook_scales_gradebook_weight_method($gid);
  $weights = array('category' => array());
  $result = db_query('SELECT tid, gradeweight FROM {gradebook_scales_grade_weight} WHERE gid = :gid', array(':gid' => $gid));
  foreach ($result as $weightdata) {
    $weights['category'][$weightdata->tid] = $weightdata->gradeweight;
  }
  return array_merge( array('method' => $method), $weights);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_save_gradebook_weights($gid, $edit) {
  $rows = db_query('SELECT COUNT(gid)FROM {gradebook_scales_calc_method} WHERE gid = :gid', array(':gid' => $gid))->fetchField();
  if ($rows > 0) {
    db_update('gradebook_scales_calc_method')
    ->fields(array('calcmethod' => $edit['method']))
    ->condition('gid', $gid)
    ->execute();
  }
  else {
    db_insert('gradebook_scales_calc_method')
    ->fields(array(
      'gid' => $gid,
      'calcmethod' => $edit['method'],
    ))
    ->execute();
  }

  db_delete('gradebook_scales_grade_weight')
  ->condition('gid', $gid)
  ->execute(); //clear old weights

  if (!empty($edit['category'])) {
    $keys = array_keys($edit['category']);
    foreach ($keys as $key) {
      $value = is_numeric($edit['category'][$key]) ? abs((float) $edit['category'][$key]) : NULL;
      db_insert('gradebook_scales_grade_weight')
      ->fields(array(
        'gid' => $gid,
        'tid' => $key,
        'gradeweight' => $value,
      ))
      ->execute();
    }
  }
  // Re-calculate all term grades since weighting may have changed.
  gradebookapi_rebuild_grades($gid);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_gradebook_weight_method($gid) {
  return db_query('SELECT calcmethod FROM {gradebook_scales_calc_method} WHERE gid = :gid', array(':gid' => $gid))->fetchField();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_weight_form($form, $form_state, $gradebook) {
  $default = gradebook_scales_gradebookapi_get_gradebook_weights($gradebook->tid);
  $vid = gradebookapi_get_vid();
  $vocabulary = taxonomy_vocabulary_load($vid);
  $tree = taxonomy_get_tree($vocabulary->vid, $gradebook->tid);
  $form = array();
  $form = array('#theme' => 'gradebook_scales_weight_form');
  $form['method'] = array(
    '#title' => t('Weight Gradebook Categories'),
    '#type' => 'radios',
    '#options' => array(
      0 => t('No Weighting'),
      1 => t('Weight final grade by category percentages'),
      2 => t('Weight final grade by category multiplier'),
    ),
    '#default_value' => $default['method'] ? $default['method'] : 0,
    '#description' => t('Select the method to use to weight graded assignments to determine overall grade. Weighting by category percentages assigns a percentage of the total grade to each category. Weighting by category multiplier will determine the overall grade points after multiplying earned and possible grades by category weight.  For ether weighting method, enter category weights as percentages, below.'),
    '#required' => TRUE,
  );
  
  $form['category'] = array('#tree' => TRUE);
  foreach ($tree as $term) {
    $id = $term->tid;
    if (!isset($default['category'][$id])) {
      $default['category'][$id] = '';
    }
    $form['category'][$id] = array(
      '#type' => 'textfield',
      '#size' => 4,
      '#default_value' => $default['category'][$id],
    );
  }

  $form['#gid'] = $gradebook->tid;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('gradebook_scales_weight_form_cancel'),
  );
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_weight_form_submit($form, &$form_state) {
  gradebook_scales_save_gradebook_weights($form['#gid'], $form_state['values']);
  $form_state['redirect'] = 'gradebook/' . $form['#gid'] . '/catlist';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function gradebook_scales_weight_form_cancel($form, &$form_state) {
  $form_state['redirect'] = 'gradebook/' . $form['#gid'] . '/catlist';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_gradebook_scales_weight_form($variables) {
  $form = $variables['form'];
  $output = drupal_render($form['method']);
  $header = array(t('Category name'), t('Weight (%)'));
  $keys = element_children($form['category']);
  foreach ($keys as $key) {
    $term = taxonomy_term_load($key);
    $row = NULL;
    $row[] = array('data' => $term->name);
    $row[] = array('data' => drupal_render($form['category'][$key]));
    $rows[] = array('data' => $row);
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= '<div>' . drupal_render($form['submit']) . drupal_render($form['cancel']) . '</div>';
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_gradebookapi_weighted_grade().
 *
 */
function gradebook_scales_gradebookapi_weighted_grade($gid, $tid, $possible, $earned) {
  $weighted_grade = array(
    'earned' => $earned,
    'possible' => $possible,
  );
  $weights = gradebook_scales_gradebookapi_get_gradebook_weights($gid);

  if ($weights['method'] > 0) {
    if (isset($weights['category'][$tid]) && is_numeric($weights['category'][$tid])) { // if category weight isn't set, treat as 0% weight
      switch ($weights['method']) {
        case 1: // term grade is a category weighted percentage
          $weighted_grade['earned'] = ($possible == 0) ? 0 : $weights['category'][$tid] * $earned / $possible;
          $weighted_grade['possible'] = ($possible == 0) ? 0 : $weights['category'][$tid];
          break;
        case 2: // term grade is a weighted point total
          $weighted_grade['earned'] = $weights['category'][$tid] * $earned / 100.0;
          $weighted_grade['possible'] = $weights['category'][$tid] * $possible / 100.0;
          break;
      }
    }
  }
  return $weighted_grade;
}

/**
 * Implements hook_disable().
 *   set weighting method to unweighted and rebuild grades before module is disabled
 *
 */
function gradebook_scales_disable() {
  $result = gradebookapi_gradebook_query();
  while ($tid = $result->fetchField()) { // Turn off weighting for all gradebooks and rebuild grades.
    db_update('gradebook_scales_calc_method')
    ->fields(array('calcmethod' => 0,))
    ->condition('gid', $tid)
    ->execute();
    gradebookapi_rebuild_grades($tid); // Re-calculate all term grades since weighting may have changed.
  }
}
